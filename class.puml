@startuml

' ==============================
' PACKAGES
' ==============================
package controller {
    class KwazamController {
        + KwazamView view
        + KwazamModel model
        + KwazamMouseHandler mouseHandler
        + KwazamMenuHandler menuHandler
        + KwazamWindowHandler windowHandler
        + KwazamPiece selectedPiece
        + KwazamPiece draggedPiece
        + int pressX, pressY
        + boolean dragging
        + KwazamController(KwazamView, KwazamModel)
        + void initController()
        + void startGame()
        + void loadGame(String)
        + void updateView()
    }

    class KwazamMouseHandler {
        + KwazamController controller
        + void initMouseListeners()
        + void removeMouseListeners()
        + void handleMousePressed(MouseEvent)
        + void handleMouseReleased(MouseEvent)
        + void handleMouseDragged(MouseEvent)
        + void handleMouseMoved(MouseEvent)
    }

    class KwazamMenuHandler {
        + KwazamController controller
        + void initMenuListeners()
        + void removeMenuListeners()
        + void newGame()
        + void restartGame()
        + void saveGame()
        + void loadGame(String)
        + void quitGame()
    }

    class KwazamWindowHandler {
        + KwazamController controller
        + void initWindowListeners()
        + void removeWindowListeners()
    }
}

package model {
    class KwazamModel {
        + KwazamBoard gameBoard
        + String[][] gameState
        + KwazamPieceColor currentColor
        + String player1Name, player2Name
        + String winner
        + boolean running
        + float turn
        + String currentFilename
        + void initGame()
        + boolean movePiece(KwazamPiece, int, int)
        + void swapXorTor()
        + boolean isValidMove(KwazamPiece, int, int)
        + boolean hasOpponentPiece(int, int)
        + boolean isSauInCheck(KwazamPieceColor)
        + KwazamPiece getSau(KwazamPieceColor)
        + void switchColor()
        + boolean isSauCaptured()
        + boolean isWinnerFound()
        + void updateGameState()
        + void saveGame(String)
        + void loadGame(String)
        + boolean hasSavedGame()
        + void clearSavedGame()
        + void resetGame()
        + void stopGame()
    }

    class KwazamBoard {
        + List<KwazamPiece> pieces
        + int cols, rows
        + void setupBoard()
        + void addPiece(KwazamPiece)
        + void removePiece(KwazamPiece)
        + void removePiece(int, int)
        + void capturePiece(KwazamPiece, int, int)
        + void movePiece(KwazamPiece, int, int)
        + boolean isWithinBounds(int, int)
    }

    class KwazamPiece {
        + KwazamPieceColor color
        + KwazamPieceType type
        + int x, y
        + MovementStrategy movementStrategy
        + List<int[]> getValidMoves(KwazamBoard)
    }

    class Ram {
        + int direction
    }

    class Biz {
    }

    class Sau {
    }

    class Tor {
    }

    class Xor {
    }

    class KwazamPieceFactory {
        + static KwazamPiece getPiece(KwazamPieceColor, KwazamPieceType, int, int)
    }
}

package model.movements {
    interface MovementStrategy {
        + List<int[]> getValidMoves(KwazamPiece, KwazamBoard)
    }

    class RamMovement {
        + List<int[]> getValidMoves(KwazamPiece, KwazamBoard)
    }

    class BizMovement {
        + List<int[]> getValidMoves(KwazamPiece, KwazamBoard)
    }

    class SauMovement {
        + List<int[]> getValidMoves(KwazamPiece, KwazamBoard)
    }

    class TorMovement {
        + List<int[]> getValidMoves(KwazamPiece, KwazamBoard)
    }

    class XorMovement {
        + List<int[]> getValidMoves(KwazamPiece, KwazamBoard)
    }
}

package view {
    class KwazamView {
        + KwazamBoardPanel boardPanel
        + KwazamMenuBar menuBar
        + QuitGameDialog quitGameDialog
        + StartGameDialog startGameDialog
        + EndGameDialog endGameDialog
        + RestartGameDialog restartGameDialog
        + NewGameDialog newGameDialog
        + RulesDialog rulesDialog
        + SaveGameDialog saveGameDialog
        + void initView()
        + void addChessBoard()
        + void showValidMoves(List<int[]>)
        + void hideValidMoves()
        + void addMenuBar()
        + void refreshLoadGameMenu()
        + Optional<String[]> showStartGameDialog()
        + void showEndGameDialog(String)
        + boolean showNewGameDialog()
        + boolean showRestartDialog()
        + SaveGameDialog getSaveGameDialog()
        + boolean showQuitDialog()
        + void showRulesDialog()
    }

    class KwazamBoardPanel {
        + List<KwazamRenderPiece> renderPieces
        + KwazamRenderPiece selectedPiece, draggingPiece
        + List<int[]> availableMoves
        + int dragX, dragY
        + int hoveredGridX, hoveredGridY
        + int panelWidth, panelHeight
        + int boardWidth, boardHeight
        + int squareSize
        + int squareWidth, squareHeight
        + int xOffset, yOffset
        + int sauInCheckX, sauInCheckY
        + boolean boardFlipped
        + void drawBoard(Graphics)
        + void drawCoordinates(Graphics)
        + void drawPiece(Graphics2D, KwazamRenderPiece, int, int, int)
        + void flipBoard()
        + void flipBoardToDefault()
    }

    class KwazamRenderPiece {
        + String data
        + int x, y
        + BufferedImage img
        + boolean flipped
        + void flip()
    }
}

package view.dialogs {
    class EndGameDialog {
        + void showDialog(Frame, String)
    }

    class NewGameDialog {
        + boolean showDialog(JFrame)
    }

    class QuitGameDialog {
        + boolean showDialog(JFrame)
    }

    class RestartGameDialog {
        + boolean showDialog(JFrame)
    }

    class RulesDialog {
        + void showDialog(JFrame)
    }

    class SaveGameDialog {
        + boolean promptSaveBeforeAction(JFrame, String)
        + Optional<String> showDialog(JFrame)
    }

    class StartGameDialog {
        + Optional<String[]> showDialog(JFrame)
    }
}

package view.components {
    class KwazamMenuBar {
        + JMenu menu
        + JMenu help
        + JMenu settings
        + JMenuItem newGameOption
        + JMenuItem restartOption
        + JMenuItem saveGameOption
        + JMenu loadGameMenu
        + JMenuItem quitOption
        + JMenuItem toggleSoundOption
        + JMenuItem toggleBackgroundMusicOption
        + JMenuItem rulesOption
        + void populateLoadGameMenu()
    }
}

package utils {
    class KwazamConstants {
        + static final String TITLE
        + static final int WINDOW_WIDTH, WINDOW_HEIGHT
        + static final int BOARD_ROWS, BOARD_COLS
        + static final int BORDER_WIDTH
        + static final String MOVE_SOUND_PATH, CAPTURE_SOUND_PATH, WINNING_SOUND_PATH, BACKGROUND_MUSIC_PATH
        + static final Color SAU_CHECKED_COLOR, SQUARE_HIGHLIGHT_COLOR, SQUARE_COLOR_1, SQUARE_COLOR_2, BORDER_COLOR, BACKGROUND_COLOR, VALID_MOVE_COLOR
    }

    enum KwazamPieceColor {
        BLUE, RED
    }

    enum KwazamPieceType {
        RAM, BIZ, TOR, XOR, SAU
    }

    class SoundEffect {
        + static boolean soundEnabled
        + static Clip backgroundMusicClip
        + static boolean backgroundMusicEnabled
        + static long musicPosition
        + static void playSound(String)
        + static void toggleSound()
        + static void toggleBackgroundMusic()
        + static void playBackgroundMusic()
        + static void stopBackgroundMusic()
        + static void playMoveSound()
        + static void playCaptureSound()
        + static void playWinningSound()
    }
}

' ==============================
' RELATIONSHIPS
' ==============================

' Controller Package
KwazamController *-- KwazamView : composition
KwazamController *-- KwazamModel : composition
KwazamController *-- KwazamMouseHandler : composition
KwazamController *-- KwazamMenuHandler : composition
KwazamController *-- KwazamWindowHandler : composition

' Model Package
KwazamModel *-- KwazamBoard : composition
KwazamBoard *-- KwazamPiece : composition
KwazamPiece <|-- Ram : extends
KwazamPiece <|-- Biz : extends
KwazamPiece <|-- Sau : extends
KwazamPiece <|-- Tor : extends
KwazamPiece <|-- Xor : extends
KwazamPiece *-- MovementStrategy : composition
MovementStrategy <|.. RamMovement : implements
MovementStrategy <|.. BizMovement : implements
MovementStrategy <|.. SauMovement : implements
MovementStrategy <|.. TorMovement : implements
MovementStrategy <|.. XorMovement : implements

' View Package
KwazamView *-- KwazamBoardPanel : composition
KwazamView *-- KwazamMenuBar : composition
KwazamView *-- EndGameDialog : composition
KwazamView *-- StartGameDialog : composition
KwazamView *-- RestartGameDialog : composition
KwazamView *-- NewGameDialog : composition
KwazamView *-- RulesDialog : composition
KwazamView *-- SaveGameDialog : composition
KwazamBoardPanel *-- KwazamRenderPiece : composition

' Utils Package
KwazamPiece --> KwazamPieceColor : uses
KwazamPiece --> KwazamPieceType : uses
SoundEffect --> KwazamConstants : uses

@enduml